/* tslint:disable */
/* eslint-disable */
/**
 * Note Keeper
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiNoteCreateRequest,
  ApiNoteUpdateRequest,
} from '../models/index';
import {
    ApiNoteCreateRequestFromJSON,
    ApiNoteCreateRequestToJSON,
    ApiNoteUpdateRequestFromJSON,
    ApiNoteUpdateRequestToJSON,
} from '../models/index';

export interface CreatePostRequest {
    apiNoteCreateRequest?: ApiNoteCreateRequest;
}

export interface NoteIdGetRequest {
    noteId: string;
}

export interface NoteIdTitlePutRequest {
    noteId: string;
    apiNoteUpdateRequest?: ApiNoteUpdateRequest;
}

/**
 * NoteApi - interface
 * 
 * @export
 * @interface NoteApiInterface
 */
export interface NoteApiInterface {
    /**
     * 
     * @param {ApiNoteCreateRequest} [apiNoteCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    createPost(apiNoteCreateRequest?: ApiNoteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    listGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    listGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} noteId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    noteIdGetRaw(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    noteIdGet(noteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     * 
     * @param {string} noteId 
     * @param {ApiNoteUpdateRequest} [apiNoteUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NoteApiInterface
     */
    noteIdTitlePutRaw(requestParameters: NoteIdTitlePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    noteIdTitlePut(noteId: string, apiNoteUpdateRequest?: ApiNoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class NoteApi extends runtime.BaseAPI implements NoteApiInterface {

    /**
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiNoteCreateRequestToJSON(requestParameters.apiNoteCreateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createPost(apiNoteCreateRequest?: ApiNoteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createPostRaw({ apiNoteCreateRequest: apiNoteCreateRequest }, initOverrides);
    }

    /**
     */
    async listGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async listGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.listGetRaw(initOverrides);
    }

    /**
     */
    async noteIdGetRaw(requestParameters: NoteIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling noteIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{noteId}`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async noteIdGet(noteId: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noteIdGetRaw({ noteId: noteId }, initOverrides);
    }

    /**
     */
    async noteIdTitlePutRaw(requestParameters: NoteIdTitlePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.noteId === null || requestParameters.noteId === undefined) {
            throw new runtime.RequiredError('noteId','Required parameter requestParameters.noteId was null or undefined when calling noteIdTitlePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/{noteId}/title`.replace(`{${"noteId"}}`, encodeURIComponent(String(requestParameters.noteId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ApiNoteUpdateRequestToJSON(requestParameters.apiNoteUpdateRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async noteIdTitlePut(noteId: string, apiNoteUpdateRequest?: ApiNoteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.noteIdTitlePutRaw({ noteId: noteId, apiNoteUpdateRequest: apiNoteUpdateRequest }, initOverrides);
    }

}
